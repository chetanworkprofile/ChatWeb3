@page "/chatpage"
@using ChatWeb3Frontend.Services;
@using Microsoft.AspNetCore.SignalR.Client;
@inject IJSRuntime JsRuntime
@inject IApiCalling apiCalling

<div class="row">
    <div class="column left">
        <div class="sideBar">
            <div class="body">
                <img src="./logo.png" class="sideBarGroupPic"/>
            </div>
            <div class="sideBarGroup" >
                <img src="./icons8-settings-512.png" class="imageicon" style="margin:10px; margin-bottom: 0px;" />
                <img src="./icons8-logout-96.png" class="imageicon" style="margin:10px; margin-left:10px; margin-bottom: 0px;" @onclick="()=>{logOut();}" />
                <img src="./logo.png" class="sideBarGroupPic" @onclick="()=>{showProfile();}" />
            </div>

        </div>
    </div>
    <div class="column middle">
        <div>
            <div class="chatlistHeader">
                    <div class="searchbox">
                        <input class="textbox" @bind="@searchText" placeholder="message" @onkeyup="search" />
                        <img src="./icons8-search-480.png" class="imageicon" onclick="" />
                    </div>
                <div class="tab">
                    <div class="@getChatTabClass()" @onclick="() => {isGroups=false;}">
                        Chats
                    </div>
                    <div class="@getGroupTabClass()" @onclick="() => {OnClickGroup();}">
                        Groups
                    </div>
                </div>
            </div>
            @if (!isSearching)
            {
                <div class="chatlist">
                    <div class="scrollable-element">
                        @if (!isGroups)
                        {
                            foreach (OutputChatMapping chat in ChatList)
                            {
                                <div class="@GetClass(chat.chatId)" @onclick="async () => {await OnClickChatList(chat.chatId,chat.firstName,chat.lastName,chat.username);}">
                                    @if (chat.countOfUnseen != 0)
                                    {
                                        <span class="message-badge"> @chat.countOfUnseen</span>
                                    }
                                    <div class="sendbuttonLogo">
                                        <img src="./logo.png" class="selfPicture" />
                                        @chat.firstName @chat.lastName
                                    </div>
                                    @if (chat.isOnline)
                                    {
                                        <span class="unread-badge"></span>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            foreach (OutputGroups group in GroupList)
                            {
                                <div class="@GetClass(group.id)" @onclick="async () => {await OnClickChatList(group.chatId,group.name, true);}">
                                    <div class="sendbuttonLogo">
                                        <img src="./logo.png" class="selfPicture" />
                                        @group.name
                                    </div>
                                </div>
                            }
                            @if (isGroups)
                            {
                                <div class="addGroupbutton">
                                    <img src="./icons8-plus-90.png" class="imageicon" onclick="" />
                                </div>
                            }
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="chatlist">
                    <div class="scrollable-element">
                        @if (!isGroups)
                        {
                            foreach (ResponseUser chat in searchChat)
                            {
                                <div class="@GetClass(chat.id)" @onclick="async () => {await onClickSearchList(chat.id,chat.firstName,chat.lastName,chat.username);}">
                                    <div class="sendbuttonLogo">
                                        <img src="./logo.png" class="selfPicture" />
                                        @chat.firstName @chat.lastName
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            foreach (OutputGroups group in GroupList)
                            {
                                <div class="@GetClass(group.id)" @onclick="async () => {await OnClickChatList(group.chatId,group.name, true);}">
                                    <div class="sendbuttonLogo">
                                        <img src="./logo.png" class="selfPicture" />
                                        @group.name
                                    </div>
                                </div>
                            }
                            @if (isGroups)
                            {
                                <div class="addGroupbutton">
                                    <img src="./icons8-plus-90.png" class="imageicon" onclick="" />
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="column right">
        <div class="chatbox">
            @if(openChatName != string.Empty)
            {
                <div class="header">
                    <div class="tab">
                        <img src="./logo.png" class="chatPicture" />
                        <div style="flex-direction:column;">
                            @openChatName
                            <div style="font-size:12px">@openChatUsername</div>
                        </div>
                    </div>
                    <div>
                        <img src="./icons8-menu-vertical-96.png" class="imageicon" />
                    </div>
                </div>

                <div class="messagebox">
                    <div class="scrollable-element">
                        <div style="display:flex; flex-direction:column; justify-content:flex-end; ">
                            @foreach (OutputMessage message in messages)
                            {
                                if (message.senderId == myId)
                                {
                                    <div class="messageParent">
                                        <div class="message user">
                                            <div>
                                                @message.content
                                            </div>
                                            @if (message.isSeen)
                                            {
                                                <div class="seen-badge">
                                                    <img src="./icons8-done-208.png" style="height:14px; width:18px" />
                                                </div>
                                            }
                                        </div>
                                        <div class="messageInfo">
                                            @GetTime(message.createdAt)
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="messageParent2">
                                        <div class="message">
                                            <div>
                                                @message.content
                                            </div>
                                        </div>
                                        <div class="messageInfo2">
                                            @GetTime(message.createdAt)
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="chatboxFooter">
                    <div class="input-box">
                        <input class="textbox" type="text" @bind="@textBoxValue" placeholder="message" @onkeyup="pressEnter" />
                        <img src="./icons8-attach-90.png" class="imageicon" onclick="" />
                        <img src="./icons8-image-96.png" class="imageicon" onclick="" />
                        <img src="./icons8-microphone-96.png" class="imageicon" onclick="" />
                    </div>
                    <button class="sendbutton" @onclick="() => {sendbuttonEvent();}"><img src="./Sendbutton.png" class="sendbuttonLogo" /></button>
                </div>
            }
        </div>
    </div>
    @if (sidePanel)
    {
        <div class="sidePanel">
            <div style=" padding: 10px;">
                <img src="./icons8-close-480.png" class="imageicon" @onclick="()=>{collapseSidePanel();}" />
            </div>
            <div class="sidePanel-rowDiv">
                <img src="./icon-192.png" class="sidePanel-ProfilePic" onclick="">
                <div class="buttonPosition">
                    <div class="editButton">
                        <img src="./icons8-edit-480.png" class="imageicon" onclick="" />
                    </div>
                </div>
            </div>
            <div class="sidePanel-rowDiv" style="align-items: center">
                <div>
                    @if (editPermission)
                    {

                        <input class="sidepanel-Username" type="text" @bind="@sidePanelUsername" placeholder="" @onkeyup="pressEnter" />
                    }
                    else
                    {
                        <input class="sidepanel-Username" type="text" @bind="@sidePanelUsername" disabled placeholder="" @onkeyup="pressEnter" />
                    }
                    <img src="./icons8-edit-480.png" class="imageicon" onclick="" />
                </div>
            </div>
        </div>
    }
</div>

@code {
    string searchText = string.Empty;
    static HubConnection? hub;
    bool sidePanel = false;
    bool editPermission = false;
    string sidePanelUsername = "";
    private ElementReference containerRef;
    Guid currChatId = new Guid();
    string textBoxValue = string.Empty;
    Guid myId = new Guid();
    bool isGroups = false;
    Guid tempGuid = Guid.Empty;
    string chatListClass = "chatlist-item";
    public OutputChatMapping chat = new OutputChatMapping();
    public OutputChatMapping chat2 = new OutputChatMapping();
    List<OutputChatMapping> ChatList = new List<OutputChatMapping>();
    List<OutputGroups> GroupList = new List<OutputGroups>();
    List<OutputMessage> messages = new List<OutputMessage>();
    string openChatName = string.Empty;
    string openChatUsername = string.Empty;
    Guid openChatId = Guid.Empty;
    bool isOpenChatGroup = false;
    bool isSearching = false;

    List<ResponseUser> searchChat = new List<ResponseUser>();

    protected async override Task OnInitializedAsync()
    {
        hub = socket.GetHubConnection();
        if (hub == null)
        {
            await socket.Connect();
            hub = socket.GetHubConnection();
        }
        await GetChatList();
        await ReceiveChatList();
        var mydata = await apiCalling.getYourself();
        sidePanelUsername = mydata.username;
        myId = mydata.id;
        return;
    }


    public async Task ReceiveChatList()
    {
        hub = socket.GetHubConnection();
        if (hub == null)
        {
            await socket.Connect();
        }
        hub!.On("ReceivedChats", (Response response) =>
        {
            string data = JsonSerializer.Serialize(response.data);
            PaginationCountList<OutputChatMapping> chatList = JsonSerializer.Deserialize<PaginationCountList<OutputChatMapping>>(data)!;
            ChatList = chatList.list;

            StateHasChanged();
        });

        hub!.On("ReceivedMessage", (OutputMessage message) =>
        {
            if (message.chatId == openChatId)
            {
                messages.Add(message);
            }
            StateHasChanged();
        });
    }


    //public async Task receiveChatMessages()
    //{
    //    hub = socket.GetHubConnection();
    //    if (hub == null)
    //    {
    //        await socket.Connect();
    //    }
    //    hub!.On("ReceivedChatMessages", (Response a) =>
    //    {
    //        string data = JsonSerializer.Serialize(a.data);
    //        PaginationCountList<OutputMessage> _messages = JsonSerializer.Deserialize<PaginationCountList<OutputMessage>>(data)!;
    //        messages = _messages.list;
    //        StateHasChanged();
    //    });
    //}

    public void sendMessaege()
    {

    }

    public async Task GetChatList()
    {
        var response = await hub!.InvokeAsync<Response>("GetChats",1,20);
        string data = JsonSerializer.Serialize(response.data);
        PaginationCountList<OutputChatMapping> chatList = JsonSerializer.Deserialize<PaginationCountList<OutputChatMapping>>(data)!;
        ChatList = chatList.list;
        StateHasChanged();
    }

    private string getChatTabClass()
    {
        if (isGroups)
        {
            return "normaltab" ;
        }
        return "choosentab";
    }

    private string getGroupTabClass()
    {
        if (isGroups)
        {
            return "choosentab";
        }
        return "normaltab";
    }

    private async Task OnClickChatList(Guid chatId, string firstName,string lastName,string username)
    {
        openChatUsername = "@"+username;
        await OnClickChatList(chatId, firstName + " " + lastName, false);
    }

    private async Task OnClickChatList(Guid chatId, string name,bool isGroup)
    {
        openChatName = name;
        openChatId = chatId;
        isOpenChatGroup = isGroup;
        if (isGroup)
        {
            openChatUsername = string.Empty;
        }
        var response = await hub!.InvokeAsync<Response>("GetChatMessages", chatId.ToString(), 1, 20);
        string data = JsonSerializer.Serialize(response.data);
        PaginationCountList<OutputMessage> _messages = JsonSerializer.Deserialize<PaginationCountList<OutputMessage>>(data)!;
        messages = _messages.list;
        StateHasChanged();
    }

    private void OnClickGroup()
    {
        isGroups = true;
    }
    /// <summary>
    /// A function to get the class of Chat entity div (after selecting a chat it is used to change selected div's class)
    /// </summary>
    /// <param name="chatId"></param>
    /// <returns> string </returns>
    public string GetClass(Guid chatId)
    {
        if(chatId == tempGuid)
        {
            return "chatlist-item-active";
        }
        return chatListClass;
    }

    public void sendbuttonEvent()
    {
        Console.WriteLine("textboxvalue = " + textBoxValue);
        if (textBoxValue != string.Empty)
        {
            InputMessage msg = new InputMessage();
            msg.isGroup = isOpenChatGroup;
            msg.chatId = openChatId.ToString();
            msg.content = textBoxValue;
            msg.type = 0;
            hub!.InvokeAsync<Task>("SendMessage", msg);
            textBoxValue = string.Empty;
        }
    }


    private void pressEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            sendbuttonEvent();
        }
    }

    private async void search(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Searching();
        }
    }

    public async Task Searching()
    {
        isSearching = true;
        List<ResponseUser> _searchChat = await apiCalling.getUsers(searchText);
        searchChat = _searchChat;
    }

    private string GetTime(DateTime time)
    {
        TimeSpan t = time.TimeOfDay;

        return time.ToString("hh\\:mm tt");
    }
    public void showProfile()
    {
        sidePanel = true;
    }
    public void collapseSidePanel()
    {
        sidePanel = false;
    }

    public async Task onClickSearchList(Guid id,string firstName,string lastName,string username)
    {
        var response = await hub!.InvokeAsync<Response>("CreateChat", id.ToString());
        string data = JsonSerializer.Serialize(response.data);
        OutputChatMapping chat = JsonSerializer.Deserialize<OutputChatMapping>(data)!;
        await OnClickChatList(id, firstName, lastName, username);
        await GetChatList();
        isSearching = false;
    }

    public void logOut()
    {
        _authService.Logout();
        _navMgr.NavigateTo("/",true);
    } 
}
