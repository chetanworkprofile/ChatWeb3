@page "/details"
@using System.Text.Json;
@inherits UserDetailsBase
@inject HttpClient client
@inject IFileReaderService fileReader
<div id="details-page">
    <div id="main">
        <h1>Fill Your Details</h1>
        <form>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" @bind-value="@updateUser.username" required>

            <label for="profileImage">Profile Image:</label>
            <input type="file" id="profileImage" name="profileImage" accept="image/*" @ref="elementReference" @onchange="async () => await OpenFileAsync()" required>

            <label for="firstName">First Name:</label>
            <input type="text" id="firstName" name="firstName" @bind-value="@updateUser.firstName" required>

            <label for="lastName">Last Name:</label>
            <input type="text" id="lastName" name="lastName" @bind-value="@updateUser.lastName">

            <input type="submit" value="Continue" @onclick:preventDefault=true @onclick="()=>(UpdateUser_Click(updateUser))" />
        </form>
    </div>
</div>

@code {
    ElementReference elementReference;
    string message = string.Empty;
    string imagePath = null;
    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;
    Stream fileStream = null;
    Models.FileResponseData fileUpload;
    async Task OpenFileAsync()
    {
        var file = (await fileReader.CreateReference(elementReference).EnumerateFilesAsync()).FirstOrDefault();
        if (file == null) return;
        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;
        size = $"{fileInfo.Size}b";
        type = fileInfo.Type;

        using (var memoryStream = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            fileStream = new MemoryStream(memoryStream.ToArray());
        }
        await UploadFileAsync();
    }

    async Task UploadFileAsync()
    {
        string token = "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTUxMiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3ByaW1hcnlzaWQiOiJhOTk3NDE5OC0zNzVmLTQ5YTAtYmQxMy1kYTVlYTQxYzQyM2EiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiUmFrZXNoIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvc2lkIjoiMHhkQjc2RjgwM0FCOWYzNTBGOTI4QUQ1MzM1ZkI4YzA5RThhMzYyMjVhIiwiZXhwIjoxNjg5NDAyMTAzfQ.M_8yvrcfhuLplhMEKFRh1FyxODm2R4TSX9SN3NwPW8D6przcrEhtl8XQa_Q9HknCRCyqlkB0ZmaX_m4QeDTfdw";
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
        content.Add(new StreamContent(fileStream, (int)fileStream.Length), "file", fileName);
        var response = await client.PostAsync("api/v1/uploadProfilePic", content);
        var apiResponse = await response.Content.ReadFromJsonAsync<APIResponse>();
        var resData = JsonSerializer.Serialize(apiResponse.data);
        fileUpload = JsonSerializer.Deserialize<Models.FileResponseData>(resData);
        updateUser.pathToProfilePic = fileUpload.pathToPic;
        imagePath = $"http://192.180.0.192:4545/{fileUpload.pathToPic}";
        Console.WriteLine(imagePath);
        message = "Upload Success";
    }
}
